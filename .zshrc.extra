#!/sh/zsh
# fzf
[ -f /usr/share/doc/fzf/examples/key-bindings.zsh ] && source /usr/share/doc/fzf/examples/key-bindings.zsh
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

type dircolors>/dev/null && [ -f ~/.colorrc ] && eval `dircolors ~/.colorrc`
type pyenv>/dev/null && eval "$(pyenv init --path)"

# zsh completions need to be initialized before additional zsh completions
if [[ -d ${HOMEBREW_PREFIX}/share/zsh-completions ]]; then
    FPATH=${HOMEBREW_PREFIX}/share/zsh-completions:$FPATH
    autoload -Uz compinit
    compinit
fi
# kubectl
[[ $commands[kubectl] ]] && source <(kubectl completion zsh)

if [[ -d ${HOMEBREW_PREFIX}/opt/openjdk/bin ]]; then
    export PATH="${HOMEBREW_PREFIX}/opt/openjdk/bin:$PATH"
fi

if [[ -f ${HOMEBREW_PREFIX}/bin/nodebrew ]]; then
    export PATH=$HOME/.nodebrew/current/bin:$PATH
fi

if [[ -f ${HOMEBREW_PREFIX}/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]];then
    source ${HOMEBREW_PREFIX}/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi
if [[ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]];then
    source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

# Google Cloud SDK
if [[ -f ~/google-cloud-sdk/path.zsh.inc ]]; then . ~/google-cloud-sdk/path.zsh.inc; fi

# gcloud command completion
if [[ -f ~/google-cloud-sdk/completion.zsh.inc ]]; then . ~/google-cloud-sdk/completion.zsh.inc; fi

# powerline
if [[ -n ${HOMEBREW_PREFIX} ]]; then
    GOPATH=${HOMEBREW_PREFIX}
else
    export GOPATH=/usr/local/go
fi
if [[ $(uname) != "Darwin" ]];then
    MODULES="ssh,host,"
fi
PATH_ALIASES=(
    '~/downloads/=~d'
    '~/Downloads/=~d'
)
for d in $(find ~/src -maxdepth 1 -mindepth 1 -type d);do
    PATH_ALIASES+='~/src/'$(basename $d)'/=~s:'$(basename $d)
done
function powerline_precmd() {
    PS1="$($GOPATH/bin/powerline-go -error $? -jobs ${${(%):%j}:-0} -modules ${MODULES}cwd,venv,perms,aws,jobs,exit,terraform-workspace,docker,git,goenv -path-aliases ${(pj:,:)PATH_ALIASES})"
}
function install_powerline_precmd() {
  for s in "${precmd_functions[@]}"; do
    if [[ "$s" = "powerline_precmd" ]]; then
      return
    fi
  done
  precmd_functions+=(powerline_precmd)
}
if [[ "$TERM" != "linux" && -f "$GOPATH/bin/powerline-go" ]]; then
    install_powerline_precmd
fi
