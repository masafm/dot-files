#!/usr/bin/env zsh
[[ -f ${HOMEBREW_PREFIX}/share/zsh-abbr/zsh-abbr.zsh ]] && source ${HOMEBREW_PREFIX}/share/zsh-abbr/zsh-abbr.zsh
if [[ $functions[abbr] ]];then
    alias alias-abbr='abbr -S -q'
else
    alias alias-abbr='alias'
fi
alias ls='ls --color=auto'
if [[ $(uname) == Darwin ]];then
    [[ $commands[htop] ]] && alias top='htop'
    if [[ ! -x ${HOMEBREW_PREFIX}/bin/gls ]];then
	alias ls='ls -FG'
    fi
fi
alias-abbr la='ls -la'
alias-abbr ll='ls -l'
alias-abbr lh='ls -lh'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias gtags='gtags --gtagslabel=pygments -v'
alias emacs='emacs -nw'
alias-abbr dfi="cd ${root_dir}"
alias-abbr .z="emacs ${root_dir}/.zshrc && exec zsh"
alias-abbr .za="emacs ${root_dir}/.zshrc.alias && exec zsh"
alias-abbr .zb="emacs ${root_dir}/.zshrc.base && exec zsh"
alias-abbr .ze="emacs ${root_dir}/.zshrc.extra && exec zsh"
alias-abbr .zs="emacs ${root_dir}/.zshrc.shell && exec zsh"
alias .emacs='emacs ~/.emacs'
av='aws-vault exec masafumi.kashiwagi --'
alias-abbr av=$av
for c in aws sam eksctl datadog-ci;do alias $c="$av $c";done
alias-abbr awu='ssh aws-ubuntu'
alias-abbr awr='ssh aws-rhel'
alias-abbr aww='ssh aws-wg'
alias-abbr awa='ssh aws-agent'
alias-abbr c='code'
alias-abbr d='cd ~/downloads'
alias-abbr ds='datadog-agent status'
alias-abbr dcg='datadog-agent config'
alias-abbr dcc='datadog-agent configcheck'
alias-abbr e='emacs'
alias-abbr f='open .'
alias-abbr o='open'
alias-abbr gb='git branch -a'
alias-abbr co='git checkout'
alias-abbr cm='git add --all && git commit -m update; git push'
alias-abbr cl='git clone'
alias-abbr gd='git diff'
alias-abbr gp='git pull --all'
alias-abbr gpm='git pull --all; git merge'
alias-abbr gs='git status'
alias-abbr gl='git log'
alias-abbr gt='git tag'
alias-abbr h='cd ~'
alias-abbr his='history -t "%F %T"'
alias jq='jq -C'
if [[ $commands[microk8s] ]];then
    alias kubectl='microk8s.kubectl'
    alias helm='microk8s.helm'
fi
alias-abbr k='kubectl'
alias-abbr ka='kubectl apply -f'
alias-abbr ke='kubectl exec -it'
alias-abbr kgd='kubectl get deployments'
alias-abbr kgda='kubectl get daemonsets'
alias-abbr kgp='kubectl get pods'
alias-abbr kgn='kubectl get nodes'
alias less='less -R'
alias pubkey="echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDIZVSTqFyDav/xSXBBNGzN2bbbu41j4qw/rqwDTRuTxRdrxtkHdxBgtYjPgxUdpSDXg7zfwqme+VEsoz+12TNbxkuMaZWZeo+K90b3RR1Uqfb22kO4Dg7o98dJymIprn8Qn5xKoSuOJSxkVEqutgJLpVG3E7eaq5QXH4DUmjdvIxP8N+khkCldkSO3eitUOqwUhZG87H/bqtA3xBf5j2K0jF0SzfndTZnFRVZdPvJcLuPvUk9tg4INJii5DwEFngVPqtpJSew1XE97AAGQY3CvQ07YtU/S8t0olZBC+u8TaGotv10z3HYKXsc3CPIUGANfS1uNxqgkFi0SEWzQuax7zw7P0ec6WFaPUVOb+ZjW3ibpYN1CxtsO9mVRBoUNi9Anke2S9kAtytP30OfaO6SPE3ZE5kOSyO1JUGzrvKDlAYpWm9F+7EbQzs3a5zTZK3ISKSiMFsO2isOkjKoXJRcNL4pkC0auR1plPaEORkYNYd9QPQy4Wtm1OOmQXFKkmMx5D2ZG4YaSZIzlTJ/V7ow03x4BHcxb8g0a0liZfIQ9zDia7MFyOt5dJoWdKrGk0009pGJwLlcKsnA7gLGMULdvOB3FnRP38N26X8O6sFQWH60QQVM/eYFne2csFt/AT4dgb/JfUC6kab/IbjUUb+qas/pWu9B3APdVrxIb3SDb0Q== \n\
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC5vMjSIuVkudNEou6wF3sXO8eyekZSdkj4mJdSpXlTW5PBKzntBeIjwc45xihL4/31DS6b5/zgps7wTFuPBfa2R36iVfuKcjj5yj2unjt459HAupP8AMXxpDkK3Z9/CkhC5CBHB0BI7GYBh8WJ6rAA97xG8oz1JRWe2U+8zfpe6L4B5XboeEV5plyAxKcdTBoUrj5X0ibMiL84qZXRFhk1r18Df4kxa7ICayhDqW2vZZBGHNgsyAPHZEILMwl/xEg8RYY/rmbH9tBZDWe9reDrREV+UupBZagtHMw0vwrJpj9RZtHFZWYIBlGm+5G74B/6lnMqhp9TnSZGXHYLkMhpAwXoeTioL6PvmCNEBypblFv5rukapgPLwC+lbs/iXot5kZOMIs26E1nA1w18G6jkJq+vB3eKrRrNt8W0C6l35Jgb+Orb7JxTzSTJMQCxOtW0BhrUFg/p/wIwdj3dFIwUGpROzYHV/byQd3rHw8mXcDgAgLtep0jGyRidbyg1N3c= mkashi@MKs-ThinkCentre'"
alias-abbr s='cd ~/src'
alias su='sudo su'
alias sudo='sudo -E '
[[ -d /opt/homebrew/etc/wireguard/ ]] && alias-abbr wu="for if in $(cd /opt/homebrew/etc/wireguard/>/dev/null && ls *.conf | sed -z -e 's/\.conf\s*/ /g' -e 's/\n//g');do sudo wg-quick up \$if;done"
[[ -d /opt/homebrew/etc/wireguard/ ]] && alias-abbr wd="for if in $(cd /opt/homebrew/etc/wireguard/>/dev/null && ls *.conf | sed -z -e 's/\.conf\s*/ /g' -e 's/\n//g');do sudo wg-quick down \$if;done"
alias-abbr ..='cd ..'
alias-abbr ...='cd ../..'
alias-abbr ....='cd ../../..'
alias-abbr .....='cd ../../../..'
alias -s {txt,log,out}=emacs
alias -s {png,PNG,jpg,JPG,bmp,BMP,xls,XLS,xlsx,XLSX,doc,DOC,docx,DOCX,ppt,PPT,pptx,PPTX,pdf,PDF,zip,ZIP,tar,TAR,gz,GZ}=open
alias -s {html,HTML}=elinks

function set-title() {
    if [[ $(uname) != Darwin ]];then
	hostname_s=$(hostname)
	hostname_f=$USER@$hostname_s
    fi
    # Set terminal window name
    echo -en "\033]2; "${hostname_f+${hostname_f}:}$(pwd | sed -e 's#'$HOME'#~#')" \007"
    # Set terminal tab name
    echo -en "\033]1; "${hostname_s+${hostname_s}:}$(pwd | sed -e 's#'$HOME'#~#' -e 's#.*/##' -e 's#^$#/#')" \007"
}
set-title

# ls dir when dir changed
function chpwd() {
    set-title
    if [[ $(uname) == Darwin && ! -x ${HOMEBREW_PREFIX}/bin/gls ]];then
	ls -ltrFG
    else
	ls -ltr --color=auto
    fi
}

# Completion without ls
function expand-or-complete-or-list-files() {
    if [[ $#BUFFER == 0 ]]; then
        BUFFER="ls -t ./"
        CURSOR=6
        zle list-choices
        zle backward-kill-line
	CURSOR=2
    else
	zle expand-or-complete
        #zle expand-or-complete-or-list-hosts
    fi
}

function run-sshd() {
    if [[ $(hostname) == COMP-P7VR73TR7F && -x ${HOMEBREW_PREFIX}/sbin/sshd && -z $(pgrep sshd) ]];then
	${HOMEBREW_PREFIX}/sbin/sshd
	sleep 1
    fi
}

function ssh() {
    #run-sshd
    if [[ $(uname) == Darwin && -x ${HOMEBREW_PREFIX}/bin/ssh ]];then
	cmd=${HOMEBREW_PREFIX}/bin/ssh
    else
	cmd=/usr/bin/ssh
    fi
    if [ -n "$*" ];then
	$cmd $*
	# Erase ssh hostname from terminal tab name
	set-title
    else
       $cmd
    fi
}
for h in $(awk '/^[^#]/{print $2}' </etc/hosts | tail -n+4);do alias $h="ssh $h";done

function _my_public_ip() {
    curl https://checkip.amazonaws.com 2>/dev/null
}

function _azvm() {
    if [ -z "$*" ];then
	echo "Please specify hostname"
	return 1
    fi
    cmd=$1
    shift
    instance=${1/az/masafumi-kashiwagi}
    shift
    az vm $cmd --resource-group masafumi-kashiwagi --name $instance $*
}

function az-vm-start() {
    _azvm start $*
}

function az-vm-stop() {
    _azvm stop $*
}

function az-vm-status() {
    _azvm get-instance-view $* --query 'instanceView.statuses[1]' --output table
}

function _ec2() {
    if [ -z "$1" ];then
	echo "Please specify command"
	return 1
    fi
    if [ -z "$2" ];then
	echo "Please specify hostname"
	return 1
    fi
    cmd=$1
    shift
    instance=${1/aws/masafumi-kashiwagi}
    shift
    instance_id=$(aws ec2 describe-instances --filter "Name=tag:Name,Values=$instance" --query 'Reservations[*].Instances[*].InstanceId' --output text)
    aws ec2 $cmd --instance-ids $instance_id $*
}

function wg-add-ip() {
    if [[ -z $1 ]];then
       echo "Please specify name"
       return 1
    fi
    my_ip=$(_my_public_ip)
    date=$(date +%Y%m%d)
    aws ec2 authorize-security-group-ingress --group-id sg-02699fb13ef1d57f5 --ip-permissions IpProtocol=udp,FromPort=61234,ToPort=61234,IpRanges="[{CidrIp=${my_ip}/32,Description='${date} $1'}]"
    gcloud compute firewall-rules create masafumi-kashiwagi-vpc2-allow-wg-${date}-$1 --action=ALLOW --direction=INGRESS --network=masafumi-kashiwagi-vpc2 --priority=1000 --rules=udp:61234 --source-ranges=${my_ip}/32 --target-tags=wg
    az network firewall policy rule-collection-group collection rule add --collection-name default-nat --name wg-${date}-$1 --policy-name masafumi-kashiwagi --rcg-name DefaultDnatRuleCollectionGroup --resource-group masafumi-kashiwagi --rule-type NatRule --ip-protocols udp --dest-addr ${AZURE_FIREWALL_PIP} --destination-ports 61234 --source-addresses ${my_ip} --translated-address 192.168.30.4 --translated-port 61234
}

alias ec2-start=aws-ec2-start
function aws-ec2-start() {
    _ec2 start-instances $*
}

alias ec2-stop=aws-ec2-stop
function aws-ec2-stop() {
    _ec2 stop-instances $*
}

alias ec2-status=aws-ec2-status
function aws-ec2-status() {
    _ec2 describe-instance-status $*
}

function aws-private-ip() {
    _ec2 describe-instances $* --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text
}

function aws-public-ip() {
    _ec2 describe-instances $* --query 'Reservations[*].Instances[*].PublicIpAddress' --output text
}

function awssh() {
    if [ -z "$*" ];then
	echo "Please specify hostname"
	return 1
    fi
    input_array=(${(s:@:)1})
    if [[ ${#input_array[*]} > 1 ]];then
	user=${input_array[1]}
	instance=${input_array[2]}
    else
	instance=${input_array[1]}
    fi
    instance=${instance/aws/masafumi-kashiwagi}
    public_ip=$(aws-public-ip "$instance")
    shift
    if [[ -n $public_ip ]];then
	echo "Accessing to public IP ${public_ip}"
	ssh ${user+${user}@}${public_ip} $*
    else
	private_ip=$(aws-private-ip "$instance")
	if [[ -n $private_ip ]];then
	    echo "Public IP not found for ${instance}.\nAccessing to private IP ${private_ip}."
	    ssh ${user+${user}@}${private_ip} $*
	    if [[ $? != 0 ]];then
		proxy=$(aws-public-ip aws-ubuntu)
		echo "Public IP not found for ${instance}.\nAccessing via ${proxy}."
		ssh ${user+${user}@}${private_ip} $* -o ProxyCommand="ssh ${proxy} -W %h:%p"
	    fi
	else
	    echo "No IP found for ${instance}"
	fi
    fi
}

function azure-tunnel() {
    if [[ -z $1 ]];then
	echo "Please specify resource id"
	return 1
    fi
    if [[ -z $2 ]];then
	echo "Please specify port number"
	return 1
    fi
    if [[ -z $3 ]];then
	echo "Please specify local port number"
	return 1
    fi
    out=/tmp/$$.$(date +%s)
    az network bastion tunnel --name "masafumi-kashiwagi-bastion" --resource-group "masafumi-kashiwagi" --target-resource-id "$1" --resource-port $2 --port $3 >$out 2>&1 &
    while true;do
	if [[ -n $(grep "Tunnel is ready" $out) ]];then
	    break
	fi
	sleep 0.1
    done
    cat $out
    rm -f $out
}

function azssh() {
    if [[ -z $1 ]];then
	echo "Please specify resource id"
	return 1
    fi
    if [[ -z $2 ]];then
	user=azureuser
    else
	user=$2
    fi
    local_port=$(($RANDOM % 10000 + 50000))
    azure-tunnel "$1" 22 $local_port
    ssh -l ${user} -p ${local_port} -o StrictHostKeyChecking=no localhost
    echo "Killing tunnel"
    pkill -f "$1.*--resource-port 22 --port $local_port"
}

function gssh() {
    if [ -z "$*" ];then
	echo "Please specify hostname"
	return 1
    fi
    input_array=(${(s:@:)1})
    if [[ ${#input_array[*]} > 1 ]];then
	user=${input_array[1]}
	instance=${input_array[2]}
    else
	user=masafumi_kashiwagi_datadoghq_com
	instance=${input_array[1]}
    fi
    instance=${instance/gcp/masafumi-kashiwagi}
    gcloud compute ssh --plain ${user}@${instance}
}

function cs() {
    if [ -z "$1" ];then
	cd ~/Downloads
    else
	cd ~/Downloads/$1*
    fi
}
